use std::collections::{HashMap, HashSet};

use serde::{Deserialize, Serialize};
use rocket::{fs::TempFile, serde::json::Json};


#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum JsonQuery {
    TitleData(HashMap<String, HashSet<String>>),
    OnlyData(HashSet<String>),
}

#[derive(FromForm)]
pub struct Upload<'r> {
    pub action: Json<Action>,
    //query: Json<JsonQuery>,
    pub files: Vec<TempFile<'r>>,
}

#[derive(Debug, Deserialize, Serialize, Clone)]
pub enum Action {
    // .0 Total batches .1 batches zip file inner count
    CreateProcess((u64, u64, JsonQuery)),
    // process Id generated by core
    Stream(String)
}



#[derive(Debug, Deserialize, Serialize)]
pub struct Process {
    pub total_batches: u64,
    pub total_files: u64,
    pub current_batch: u64,
    pub is_complete: bool,
    pub query: JsonQuery,
    // a uuid string
    pub proc_id: String,
    pub data: HashMap<String, Vec<String>>,
}